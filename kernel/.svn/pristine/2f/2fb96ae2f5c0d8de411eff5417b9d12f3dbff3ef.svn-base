<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>





   <import resource="content-jcr-components-jcr.xml" />


	<bean id="org.sakaiproject.content.api.ContentHostingService"
			class="org.sakaiproject.content.multiplex.ContentHostingMultiplexService"
            init-method="init" destroy-method="destroy" singleton="true">
             <property name="contentHostingServices">              
				<map>
					<entry key="jcr" ><ref bean="org.sakaiproject.content.api.ContentHostingService.jcrservice" /></entry>
             		<entry key="db" ><ref bean="org.sakaiproject.content.api.ContentHostingService.dbservice" /></entry>
				</map>
             </property>
        <property name="defaultService" value="db" />
        <property name="entityManager"
               ref="org.sakaiproject.entity.api.EntityManager" />
 
        <property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager"/></property>
    </bean>
    <!-- database beans -->
    
    <bean id="org.sakaiproject.content.impl.ContentServiceSqlDb2"       class="org.sakaiproject.content.impl.ContentServiceSqlDb2"     singleton="true"/>
    <bean id="org.sakaiproject.content.impl.ContentServiceSqlDefault"   class="org.sakaiproject.content.impl.ContentServiceSqlDefault" singleton="true"/>
    <bean id="org.sakaiproject.content.impl.ContentServiceSqlHSql"      class="org.sakaiproject.content.impl.ContentServiceSqlHSql"    singleton="true"/>
    <bean id="org.sakaiproject.content.impl.ContentServiceSqlMsSql"     class="org.sakaiproject.content.impl.ContentServiceSqlMsSql"   singleton="true"/>
    <bean id="org.sakaiproject.content.impl.ContentServiceSqlMySql"     class="org.sakaiproject.content.impl.ContentServiceSqlMySql"   singleton="true"/>
    <bean id="org.sakaiproject.content.impl.ContentServiceSqlOracle"    class="org.sakaiproject.content.impl.ContentServiceSqlOracle"  singleton="true"/>
    
	<bean id="org.sakaiproject.content.api.ContentHostingService.dbservice"
			class="org.sakaiproject.content.impl.DbContentService"
            singleton="true">


        <property name="memoryService">              <ref bean="org.sakaiproject.memory.api.MemoryService"/>                 </property>
        <property name="aliasService">               <ref bean="org.sakaiproject.alias.api.AliasService"/>                   </property>
        <property name="siteService">                <ref bean="org.sakaiproject.site.api.SiteService"/>                     </property>
        <property name="notificationService">        <ref bean="org.sakaiproject.event.api.NotificationService"/>            </property>
        <property name="serverConfigurationService"> <ref bean="org.sakaiproject.component.api.ServerConfigurationService"/> </property>
        <property name="entityManager">              <ref bean="org.sakaiproject.entity.api.EntityManager"/>                 </property>
        <property name="sqlService">                 <ref bean="org.sakaiproject.db.api.SqlService"/>                        </property>
        <property name="lockManager">                <ref bean="org.sakaiproject.content.api.LockManager"/>                  </property>
        <property name="authzGroupService">          <ref bean="org.sakaiproject.authz.api.AuthzGroupService"/>              </property>
        <property name="resourceTypeRegistry">       <ref bean="org.sakaiproject.content.api.ResourceTypeRegistry"/>         </property>
        
        <!--
        <property name="contentHostingHandlerResolver"><ref bean="org.sakaiproject.content.api.ContentHostingHandlerResolver"/></property>
		-->
        <property name="collectionSerializer"><ref bean="org.sakaiproject.content.api.ContentHostingService.collectionSerializer"/></property>
        <property name="resourceSerializer"><ref bean="org.sakaiproject.content.api.ContentHostingService.resourceSerializer"/></property>
        <!--
        If you want to use the new serializers you have to let them migrate the data, set to true
        so that they can write the new format when they update an item.
        
        -->
        <property name="migrateData"><value>true</value></property>


        <property name="collectionTableName">       <value>CONTENT_COLLECTION</value>           </property>
        <property name="resourceTableName">         <value>CONTENT_RESOURCE</value>             </property>
        <property name="resourceBodyTableName">     <value>CONTENT_RESOURCE_BODY_BINARY</value> </property>
        <property name="locksInDb">                 <value>false</value>                        </property>
        <property name="bodyPath">                  <null/>                                     </property>
        <property name="bodyVolumes">               <null/>                                     </property>
        <property name="autoDdl">                   <value>${auto.ddl}</value>                  </property>
        <property name="siteQuota">                 <value>1048576</value>                      </property>
        <property name="availabilityChecksEnabled"> <value>true</value>                         </property>
        <property name="prioritySortEnabled">       <value>true</value>                         </property>
        <property name="useResourceTypeRegistry">   <value>true</value>                         </property>
        <property name="databaseBeans">
           <map>
              <entry key="db2"    ><ref bean="org.sakaiproject.content.impl.ContentServiceSqlDb2"    /></entry>
              <entry key="default"><ref bean="org.sakaiproject.content.impl.ContentServiceSqlDefault"/></entry>
              <entry key="hsqldb" ><ref bean="org.sakaiproject.content.impl.ContentServiceSqlHSql"   /></entry>
              <entry key="mssql"  ><ref bean="org.sakaiproject.content.impl.ContentServiceSqlMsSql"  /></entry>
              <entry key="mysql"  ><ref bean="org.sakaiproject.content.impl.ContentServiceSqlMySql"  /></entry>
              <entry key="oracle" ><ref bean="org.sakaiproject.content.impl.ContentServiceSqlOracle" /></entry>
           </map>
        </property>
  	</bean>

	<bean id="org.sakaiproject.content.api.ContentHostingHandlerResolver"
			class="org.sakaiproject.content.impl.ContentHostingHandlerResolverImpl"
			singleton="true">
	</bean>

<!--
	<bean id="uk.ac.cam.caret.ContentHostingHandlerFileSystemImpl.0000"
			class="org.sakaiproject.content.impl.ContentHostingHandlerImplFileSystem"
			singleton="true">
			<property name="contentHostingHandlerResolver" ><ref bean="org.sakaiproject.content.api.ContentHostingHandlerResolver"/></property>
	</bean>
-->

	<bean id="org.sakaiproject.content.api.ContentTypeImageService"
			class="org.sakaiproject.content.impl.BasicContentTypeImageService"
            init-method="init" destroy-method="destroy" singleton="true">
        <property name="imageFile">     <value>content_type_images.properties</value>       </property>
        <property name="nameFile">      <value>content_type_names.properties</value>        </property>
        <property name="extensionFile"> <value>content_type_extensions.properties</value>   </property>
	</bean>

	<bean id="org.sakaiproject.content.api.ContentResourceFilter.base"
			class="org.sakaiproject.content.impl.BaseExtensionResourceFilter">
        <property name="viewAll">   <value>true</value>  </property>
        <property name="mimeTypes"> <list/>              </property>
	</bean>

	<bean id="lockManagerHibernateMappings"
			class="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl">
		<property name="mappingResources">
			<list>
				<value>org/sakaiproject/content/hbm/LockManager.hbm.xml</value>
			</list>
		</property>
	</bean>

	<bean id="org.sakaiproject.content.impl.LockManagerTarget"
			class="org.sakaiproject.content.impl.LockManagerImpl"
			singleton="true">
        <property name="sessionFactory"> <ref bean="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory"/> </property>
	</bean>

	<bean id="org.sakaiproject.content.api.LockManager"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
			singleton="true">
        <property name="transactionManager">  <ref bean="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager"/>  </property>
        <property name="target">              <ref bean="org.sakaiproject.content.impl.LockManagerTarget"/>                          </property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean id="org.sakaiproject.content.api.ResourceTypeRegistry"
			class="org.sakaiproject.content.impl.DbResourceTypeRegistry"
            init-method="init" destroy-method="destroy" singleton="true">
        <property name="sqlService"> <ref bean="org.sakaiproject.db.api.SqlService"/> </property>
        <property name="autoDdl">    <value>${auto.ddl}</value>                       </property>
	</bean>
	



	
	<bean id="org.sakaiproject.content.impl.DropboxContextObserver.dbservice"
			class="org.sakaiproject.content.impl.DropboxContextObserver"
            init-method="init" destroy-method="destroy" singleton="true">

        <property name="contentService">
        	<ref bean="org.sakaiproject.content.api.ContentHostingService.dbservice"/>
		</property>
        <property name="entityManager">
        	<ref bean="org.sakaiproject.entity.api.EntityManager"/>
		</property>
	</bean>





	<bean id="org.sakaiproject.content.api.ContentHostingService.collectionSerializer"
			class="org.sakaiproject.content.impl.serialize.impl.Type1BaseContentCollectionSerializer"
			singleton="true">
        <property name="timeService">
        	<ref bean="org.sakaiproject.time.api.TimeService"/>
		</property>			
	</bean>
	
	<bean id="org.sakaiproject.content.api.ContentHostingService.resourceSerializer"
			class="org.sakaiproject.content.impl.serialize.impl.Type1BaseContentResourceSerializer"
			singleton="true">
        <property name="timeService">
        	<ref bean="org.sakaiproject.time.api.TimeService"/>
		</property>			
	</bean>

	<!-- enable logging of method calls on entrance and exit -->
	<!-- must set log level to debug -->
	<!-- 
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> 
		<property name="beanNames"><value>org.sakaiproject.content.api.ContentHostingService</value></property> 
		<property name="interceptorNames"> 
			<list> 
				<value>debugInterceptor</value>
				<value>customizableTraceInterceptor</value> 
			</list> 
		</property> 
	</bean>

	<bean id="customizableTraceInterceptor" class="org.springframework.aop.interceptor.CustomizableTraceInterceptor" >
		<property name="exitMessage">
			<value>"ContentHosting: $[targetClassShortName].$[methodName]: args: [$[arguments]] return: [$[returnValue]] ms:$[invocationTime]"</value>
		</property>
		<property name="exceptionMessage">
			<value>"ContentHosting: $[targetClassShortName].$[methodName]: args: [$[arguments]] exception: [$[exception]]"</value>
		</property>
		<property name="useDynamicLogger"><value>true</value></property>
	</bean>

	<bean id="debugInterceptor" class="org.springframework.aop.interceptor.DebugInterceptor" >
		<property name="useDynamicLogger"><value>true</value></property>
	</bean>
	-->




</beans>
