<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html version="-//W3C//DTD HTML 3.2//EN">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Advanced Search</title>
<link type="text/css" href="/library/skin/tool_base.css" rel="stylesheet">
<link type="text/css" href="/library/skin/default/tool.css" rel="stylesheet">
</head>
<body>
<div class="helpBody">
<h2>Advanced Search</h2>
<p>The Search Tool is driven by an index that contains multiple sub indexes. When using the tool for basic search, only
2 of these indexes are used: the <em>context</em> index, and the <em>content</em> index. The <em>content</em> index contains a 
stored and tokenized full text index of a digested form of the content. This means that a Word document uploaded to Resources will have had
all its text extracted and indexed, whereas a video package may have had only the metadata indexed. When the search results are returned, it is 
this content that is shown with the matching terms highlighted.
</p>
<p>
The <em>context</em> index provides a keyword index of the source of the content. This is the worksite or course which contains the content. 
When the search tool performes a basic search, it adds a search term of <em>+content:&lt;currentsiteid&gt;</em> where &lt;currentsiteid&gt; is the 
context or site id where the search is being performed. This can be translated as "<em>results must come from the current site</em>".
</p>
<p>
You can search for terms within any of the indexes. For example to search only in announcements, you can use
the search terms <em>+tool:announcement +content:cowslip</em> which will only return announcements containing the word cowslip.
</p>
<p>
The index currently contains the following named indexes.
</p> 
<ul>
<li>
<b>content:</b> A tokenized, stored index of the digested content of the search documents
</li>
<li>
<b>context:</b> A keyword stored index of the source context of the search document.
</li>
<li>
<b>tool:</b> A keyword stored index of the tool name producing the search document.
</li>
<li>
<b>title:</b> A tokenized stored index of the title of the search document.
</li>
<li>
<b>reference:</b> A keyword stored index of the Sakai Entity reference. 
</ul>
<h2>Lucene Search Information</h2>
<p>
The Query Engine is based on Apache Lucene. For completeness the Apache Query documentation is included
below. More information can be found at 
<a href="http://lucene.apache.org/java/docs/queryparsersyntax.html" target="apache" >
http://lucene.apache.org/java/docs/queryparsersyntax.html
</a>
</p>


<h3>Terms</h3>
<p>
    A query is broken up into terms and operators. There are two types of terms: Single Terms and Phrases.
</p><p>
    A Single Term is a single word such as "test" or "hello".
</p><p>
    A Phrase is a group of words surrounded by double quotes such as "hello dolly".
</p><p>
    Multiple terms can be combined together with Boolean operators to form a more complex query (see below).
</p><p>
    Note: The analyzer used to create the index will be used on the terms and phrases in the query string. So it is important to choose an analyzer that will not interfere with the terms used in the query string.
</p><h3>
Fields
</h3><p>
    Lucene supports fielded data. When performing a search you can either specify a field, or use the default field. The field names and default field is implementation specific.
</p><p>
    You can search any field by typing the field name followed by a colon ":" and then the term you are looking for.
</p><p>
    As an example, let's assume a Lucene index contains two fields, title and text and text is the default field. If you want to find the document entitled "The Right Way" which contains the text "don't go this way", you can enter:
</p><p>
    title:"The Right Way" AND text:go
</p><p>
    or
</p><p>
    title:"Do it right" AND right
</p><p>
    Since text is the default field, the field indicator is not required.
</p><p>
    Note: The field is only valid for the term that it directly precedes, so the query
</p><p>
    title:Do it right
</p><p>
    Will only find "Do" in the title field. It will find "it" and "right" in the default field (in this case the text field).
</p><h3>
Term Modifiers
</h3><p>
    Lucene supports modifying query terms to provide a wide range of searching options.
</p><h3>
    Wildcard Searches
</h3><p>
        Lucene supports single and multiple character wildcard searches.
</p><p>
        To perform a single character wildcard search use the "?" symbol.
</p><p>
        To perform a multiple character wildcard search use the "*" symbol.
</p><p>
        The single character wildcard search looks for terms that match that with the single character replaced. For example, to search for "text" or "test" you can use the search:
</p><p>
        te?t
</p><p>
        Multiple character wildcard searches looks for 0 or more characters. For example, to search for test, tests or tester, you can use the search:
</p><p>
        test*
</p><p>
        You can also use the wildcard searches in the middle of a term.
</p><p>
        te*t
</p><p>
        Note: You cannot use a * or ? symbol as the first character of a search.
</p><h3>
    Fuzzy Searches
</h3><p>
        Lucene supports fuzzy searches based on the Levenshtein Distance, or Edit Distance algorithm. To do a fuzzy search use the tilde, "~", symbol at the end of a Single word Term. For example to search for a term similar in spelling to "roam" use the fuzzy search:
</p><p>
        roam~
</p><p>
        This search will find terms like foam and roams.
</p><p>
        Starting with Lucene 1.9 an additional (optional) parameter can specify the required similarity. The value is between 0 and 1, with a value closer to 1 only terms with a higher similarity will be matched. For example:
</p><p>
        roam~0.8
</p><p>
        The default that is used if the parameter is not given is 0.5.
</p><h3>
    Proximity Searches
</h3><p>
        Lucene supports finding words are a within a specific distance away. To do a proximity search use the tilde, "~", symbol at the end of a Phrase. For example to search for a "apache" and "jakarta" within 10 words of each other in a document use the search:    		
</p><p>
        "jakarta apache"~10
</p><h3>
    Range Searches
</h3><p>
        Range Queries allow one to match documents whose field(s) values are between the lower and upper bound specified by the Range Query. Range Queries can be inclusive or exclusive of the upper and lower bounds. Sorting is done lexicographically.
</p><p>
        mod_date:[20020101 TO 20030101]
</p><p>
        This will find documents whose mod_date fields have values between 20020101 and 20030101, inclusive. Note that Range Queries are not reserved for date fields. You could also use range queries with non-date fields:
</p><p>
        title:{Aida TO Carmen}
</p><p>
        This will find all documents whose titles are between Aida and Carmen, but not including Aida and Carmen.
</p><p>
        Inclusive range queries are denoted by square brackets. Exclusive range queries are denoted by curly brackets.
</p><h3>
    Boosting a Term
</h3><p>
        Lucene provides the relevance level of matching documents based on the terms found. To boost a term use the caret, "^", symbol with a boost factor (a number) at the end of the term you are searching. The higher the boost factor, the more relevant the term will be.
</p><p>
        Boosting allows you to control the relevance of a document by boosting its term. For example, if you are searching for
</p><p>
        jakarta apache
</p><p>
        and you want the term "jakarta" to be more relevant boost it using the ^ symbol along with the boost factor next to the term. You would type:
</p><p>
        jakarta^4 apache
</p><p>
        This will make documents with the term jakarta appear more relevant. You can also boost Phrase Terms as in the example:
</p><p>
        "jakarta apache"^4 "Apache Lucene"
</p><p>
        By default, the boost factor is 1. Although the boost factor must be positive, it can be less than 1 (e.g. 0.2)
</p><h3>
Boolean operators
</h3><p>
    Boolean operators allow terms to be combined through logic operators. Lucene supports AND, "+", OR, NOT and "-" as Boolean operators(Note: Boolean operators must be ALL CAPS).
    OR
</p><p>
        The OR operator is the default conjunction operator. This means that if there is no Boolean operator between two terms, the OR operator is used. The OR operator links two terms and finds a matching document if either of the terms exist in a document. This is equivalent to a union using sets. The symbol || can be used in place of the word OR.
</p><p>
        To search for documents that contain either "jakarta apache" or just "jakarta" use the query:
</p><p>
        "jakarta apache" jakarta
</p><p>
        or
</p><p>
        "jakarta apache" OR jakarta
</p><p>
    AND
</p><p>
        The AND operator matches documents where both terms exist anywhere in the text of a single document. This is equivalent to an intersection using sets. The symbol && can be used in place of the word AND.
</p><p>
        To search for documents that contain "jakarta apache" and "Apache Lucene" use the query:
</p><p>
        "jakarta apache" AND "Apache Lucene"
</p><p>
    +
</p><p>
        The "+" or required operator requires that the term after the "+" symbol exist somewhere in a the field of a single document.
</p><p>
        To search for documents that must contain "jakarta" and may contain "lucene" use the query:
</p><p>
        +jakarta apache
</p><p>
    NOT
</p><p>
        The NOT operator excludes documents that contain the term after NOT. This is equivalent to a difference using sets. The symbol ! can be used in place of the word NOT.
</p><p>
        To search for documents that contain "jakarta apache" but not "Apache Lucene" use the query:
</p><p>
        "jakarta apache" NOT "Apache Lucene"
</p><p>
        Note: The NOT operator cannot be used with just one term. For example, the following search will return no results:
</p><p>
        NOT "jakarta apache"
</p><h3>
    -
</h3><p>
        The "-" or prohibit operator excludes documents that contain the term after the "-" symbol.
</p><p>
        To search for documents that contain "jakarta apache" but not "Apache Lucene" use the query: 		
</p><p>
        "jakarta apache" -"Apache Lucene"
</p><h3>
Grouping
</h3><p>
    Lucene supports using parentheses to group clauses to form sub queries. This can be very useful if you want to control the boolean logic for a query.
</p><p>
    To search for either "jakarta" or "apache" and "website" use the query:
</p><p>
    (jakarta OR apache) AND website
</p><p>
    This eliminates any confusion and makes sure you that website must exist and either term jakarta or apache may exist.
</p><h3>
Field Grouping
</h3><p>
    Lucene supports using parentheses to group multiple clauses to a single field.
</p><p>
    To search for a title that contains both the word "return" and the phrase "pink panther" use the query:
</p><p>
    title:(+return +"pink panther")
</p><h3>
Escaping Special Characters
</h3><p>

    Lucene supports escaping special characters that are part of the query syntax. The current list special characters are
</p><p>

    + - && || ! ( ) { } [ ] ^ " ~ * ? : \
</p><p>

    To escape these character use the \ before the character. For example to search for (1+1):2 use the query:
    		
</p><p>
    \(1\+1\)\:2
</p>
    		










</div>
</body>
</html>
