<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
/**********************************************************************************
 * $URL:  $
 * $Id:  $
 ***********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2006 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
-->
<beans>

	
	
	<bean id="org.sakaiproject.search.api.JournalSettings" 
		class="org.sakaiproject.search.journal.impl.JournalSettings"
		>
		<property name="localIndexBase" ><value>${sakai.home}indexwork</value></property>
		<property name="sharedJournalBase" ><value>${sakai.home}searchjournal</value></property>
		<property name="minimumOptimizeSavePoints" ><value>50</value></property>
		<property name="optimizeMergeSize" ><value>50</value></property>
		<property name="soakTest" ><value>false</value></property>		
		<property name="compressShared" ><value>false</value></property>		
		<!--
		Local is the Local index used for searching,
		Shared is the Shared Journal Save Points
		Create is the Index creation
		Documents, means lucene search documents, and not Sakai documents
		MaxBufferedDocs is the number of documents stored in memory before flushing to disk
		   more docs means faster indexing, but more memory consumption.
		MaxMergeDocuments is the maximum number of documents in any one segments file, 
		 this limits the file size 1,000,000 is about equivalent to 1GB.
		MaxMergeFactor limits the number of segment sets in a single save point or lucene index.
			10 means that there will be 10 docs per segment, and when there are 10 segments, they
			will be merged into a single segment. Then annother 10 segments of size 10 will be created, and 
			merged into a single segment.When ther are 10 segments with 100 docs in they will get merged 
			into a single segment with 1000 documents and process continues, untill there are 10E6 documents
			in a single segment, at which pint the maxMergeDoc's setting prevents any more being added.
			This setting should be combined with the optimizeMergeSize and the minimumOptimiSavePoints to 
			give an extimate of the maximum number of files.
			
			10 (mergeFactor) * 4 (average number of files per segment) * 50 = 2000 files for the worst case
			local segment,
			
			The shared segment merge only ever has 2 segments open at any one time so it requires 
			10 * 4 * 2 = 80 files.
			
			With the default settings the seach engine should never open more than 2080 files.
			
			-->
			
			
			
		<property name="localMaxBufferedDocs" ><value>50</value></property>
		<property name="localMaxMergeDocs" ><value>1000000</value></property>
		<property name="localMaxMergeFactor" ><value>10</value></property>
		<property name="sharedMaxBufferedDocs" ><value>50</value></property>
		<property name="sharedMaxMergeDocs" ><value>1000000</value></property>
		<property name="sharedMaxMergeFactor" ><value>10</value></property>
		<property name="createMaxBufferedDocs" ><value>50</value></property>
		<property name="createMaxMergeDocs" ><value>1000000</value></property>
		<property name="createMaxMergeFactor" ><value>10</value></property>
		
	</bean>
	
	
	
  <bean id="org.sakaiproject.search.api.SearchService"
    class="org.sakaiproject.search.component.service.impl.ConcurrentSearchServiceImpl" 
    init-method="init" >
    
	<property name="notificationService"><ref bean="org.sakaiproject.event.api.NotificationService" /></property>
	<property name="eventTrackingService"><ref bean="org.sakaiproject.event.api.EventTrackingService" /></property>
	<property name="userDirectoryService"><ref bean="org.sakaiproject.user.api.UserDirectoryService" /></property>
	<property name="sessionManager"><ref bean="org.sakaiproject.tool.api.SessionManager" /></property>
        
	<property name="searchIndexBuilder"><ref bean="org.sakaiproject.search.api.SearchIndexBuilder" /></property>
    <property name="indexStorage"><ref bean="org.sakaiproject.search.index.IndexStorage" /></property>
    
    
    <property name="autoDdl"><value>${auto.ddl}</value></property>
    <property name="filter"><ref bean="searchSecurityFilterImpl" /></property>
    <property name="defaultSorter"><value>none</value></property>
    <!--
     If you want to make this search instance use a remote search server
     set the search server URL
     http://searchserver/sakai-search/searchservice
     This is probably best done in sakai.properties eg
     searchServerUrl@org.sakaiproject.search.api.SearchService=http://localhost:8080/sakai-search-tool/xmlsearch/
    --> 
    <!--
    <property name="searchServerUrl" ><value></value></property>
    -->
    <!--
    For added security a shared key may be added, it must be the same on all nodes 
    -->
    <!--
    <property name="sharedKey" ><value></value></property>
    -->
    <property name="luceneSorters">
      <map>
        <entry key="dateRelevanceSort"><ref bean="dateRelevanceSort"/></entry>
      </map>
    </property>
    <property name="journalSettings" ref="org.sakaiproject.search.api.JournalSettings"/>
  </bean> 
     
  <bean id="org.sakaiproject.search.api.SearchIndexBuilder"
    class="org.sakaiproject.search.component.service.impl.SearchIndexBuilderImpl" 
    init-method="init" >
    <property name="searchBuilderItemDao"><ref bean="searchBuilderItemDao" /></property>
  </bean>

 <bean id="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl.search"
    class="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl">

    <property name="mappingResources">
      <list>
        <value>org/sakaiproject/search/model/impl/search.hbm.xml</value>
      </list>
    </property>
  </bean>

  
  <!-- Register the Data Access Object as a Transactional Interceptor -->
  <bean id="searchBuilderItemDao"
    class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
    <property name="transactionManager"><ref
      bean="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager"/>
    </property>
    <property name="transactionAttributes">
      <props>
        <prop key="update*">PROPAGATION_REQUIRED</prop>
        <prop key="delete*">PROPAGATION_REQUIRED</prop>
      </props>
    </property>
    <property name="target"><ref bean="searchBuilderItemDaoImpl"/></property>
  </bean>
  
  <bean id="searchBuilderItemDaoImpl"
    class="org.sakaiproject.search.component.dao.impl.SearchBuilderItemDaoImpl" singleton="true">
    <property name="sessionFactory"><ref
      bean="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory"/>
    </property>
  </bean>
    
  <bean id="org.sakaiproject.search.index.IndexStorage" 
    class="org.sakaiproject.search.journal.impl.ParallelIndexStorage" 
	   	init-method="init" 
    	destroy-method="destroy" >
    <property name="indexStorageProvider"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage" /></property>
  </bean>
  
  
  

  
  
  
  
  <!--
    to select a different storage mecahnism do this in sakai.properties
    analyzerFactoryName@org.sakaiproject.search.index.AnalyzerFactory=snowball
  -->
  <bean id="org.sakaiproject.search.index.AnalyzerFactory" 
    class="org.sakaiproject.search.index.impl.SearchAnalyzerFactory" 
    init-method="init"
    >
    <property name="defaultAnalyzerFactory"><ref bean="snowballSearchAnalyzerImpl" /></property>
    <property name="analyzerFactoryName"><value>snowball</value></property>    
    <property name="currentAnalyzers">
      <map>
        <entry key="snowball"><ref bean="snowballSearchAnalyzerImpl"/></entry>
      </map>
    </property>
  </bean>
  
  <bean id="snowballSearchAnalyzerImpl" 
    class="org.sakaiproject.search.index.impl.SnowballAnalyzerFactory" 
    >
    
  </bean>
  
  
  <!--
  ==============================RESULT FILTERS===============================
  -->

  <bean id="searchSecurityFilterImpl" 
    class="org.sakaiproject.search.filter.impl.SearchSecurityFilter" 
    init-method="init">
    <property name="entityManager"><ref bean="org.sakaiproject.entity.api.EntityManager" /></property>    
    <property name="searchIndexBuilder"><ref bean="org.sakaiproject.search.api.SearchIndexBuilder" /></property>
  </bean>
  
  <bean id="dateRelevanceSort" 
    class="org.sakaiproject.search.filter.impl.DateRelevanceSort" >
  </bean>
	
	
	
	<!--
	=====================Parallel Indexer components ========================
	-->
	
	
	
	
	
	



	<bean 
    	class="org.sakaiproject.search.journal.impl.ConcurrentIndexManager" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.concurrentIndexManager"
	   	init-method="init" 
    	destroy-method="destroy" >
    	<property name="searchService"><ref bean="org.sakaiproject.search.api.SearchService" /></property>
		<property name="indexListenerCloser"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.closer" /></property>
		<property name="tasks" >
			<list>
			<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.indexer" />
			<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.merger" />
			<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizer" />
			<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizer" />
  			</list>
		</property>
    </bean>
		
		
	<bean
        class="org.sakaiproject.search.journal.impl.IndexListenerCloser"
        id="org.sakaiproject.search.api.SearchService.parallel.index.closer" 
        >
    </bean>
		
 	<bean 
        class="org.sakaiproject.search.journal.impl.IndexManagementTimerTask" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.indexer"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="managementOperation"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.concurrentSearchIndexBuilderWorkerImpl" /></property>
			<property name="delay"><value>60000</value></property>
			<property name="period"><value>10000</value></property>
    		<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.IndexManagementTimerTask" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.merger" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="managementOperation"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.mergeUpdateOperation" /></property>
			<property name="delay"><value>60000</value></property>
			<property name="period"><value>100000</value></property>
    		<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.IndexManagementTimerTask" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizer" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="managementOperation"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeIndexOperation" /></property>
			<property name="delay"><value>60000</value></property>
			<property name="period"><value>100000</value></property>
    		<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.IndexManagementTimerTask" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizer" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="managementOperation"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationOperation" /></property>
			<property name="delay"><value>60000</value></property>
			<property name="period"><value>10000</value></property>
    		<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
    </bean>
    <!--
     central storage beans 
     -->
     <bean 
    	class="org.sakaiproject.search.component.ComponentManagerBean" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.componentManager" 
	   	init-method="init" 
    	destroy-method="destroy" >
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.DbJournalManager" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journalManager" 
	   	init-method="init" 
    	destroy-method="destroy" >
		<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
		<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService" /></property>
	</bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.JournaledFSIndexStorage" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage"
	   	init-method="init" 
    	destroy-method="destroy" >
    		<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
    		<property name="analyzerFactory" ><ref bean="org.sakaiproject.search.index.AnalyzerFactory" /></property>    
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
			<property name="journalManager"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalManager" /></property>
			<property name="recoverCorruptedIndex"><value>false</value></property>
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
			<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService" /></property>
			<property name="indexListener" >
				<list>
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.concurrentIndexManager" />
				</list>
			</property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.SharedFilesystemJournalStorage" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemJournalStorage"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journalSettings" ><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
    </bean>
    
    <!-- 
    Indexer stack.
    -->

	<bean 
    	class="org.sakaiproject.search.indexer.impl.ConcurrentSearchIndexBuilderWorkerImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.concurrentSearchIndexBuilderWorkerImpl"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="componentManager"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.componentManager" /></property>
			<property name="eventTrackingService"><ref bean="org.sakaiproject.event.api.EventTrackingService" /></property>
			<property name="indexWorker"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.transactionalIndexWorker" /></property>
			<property name="searchService"><ref bean="org.sakaiproject.search.api.SearchService" /></property>
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
			<property name="userDirectoryService"><ref bean="org.sakaiproject.user.api.UserDirectoryService" /></property>
    		<property name="securityService"><ref bean="org.sakaiproject.authz.api.SecurityService" /></property>
    		<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService"/></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.JournaledFSIndexStorageUpdateTransactionListener" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorageUpdateTransactionListener" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journaledIndex"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage" /></property>
			<property name="journalManager"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalManager" /></property>
			<property name="journalStorage"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemJournalStorage" /></property>
    </bean>

    
	<bean 
    	class="org.sakaiproject.search.indexer.impl.JournalManagerUpdateTransaction" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.journalManagerUpdateTransaction" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journalManager"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalManager" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.indexer.impl.JournalStorageUpdateTransactionListener" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.journalStorageUpdateTransactionListener" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journalStorage"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemJournalStorage" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.indexer.impl.SearchBuilderQueueManager" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.searchBuilderQueueManager"
	   	init-method="init" 
    	destroy-method="destroy" >
    	    <property name="autoDdl"><value>${auto.ddl}</value></property>
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
    		<property name="searchIndexBuilder"><ref bean="org.sakaiproject.search.api.SearchIndexBuilder" /></property>
			<property name="sequence"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.itemQueueLock"/></property>
			<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
			<property name="threadLocalManager" ref="org.sakaiproject.thread_local.api.ThreadLocalManager"/>
    </bean>
    
	<bean 
    	class="org.sakaiproject.search.transaction.impl.TransactionSequenceImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.itemQueueLock" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
			<property name="minValue" ><value>2000</value></property>
			<property name="maxValue" ><value>10000000</value></property>
			<property name="name" ><value>itemQueueLock</value></property>
    </bean>
    
    
	<bean 
    	class="org.sakaiproject.search.transaction.impl.TransactionSequenceImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.indexerSequence" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
			<property name="name" ><value>indexerTransaction</value></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.indexer.impl.TransactionIndexManagerImpl" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.transactionIndexManager"
	   	init-method="init" 
    	destroy-method="destroy" >
    		<property name="analyzerFactory" ><ref bean="org.sakaiproject.search.index.AnalyzerFactory" /></property>    
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
			<property name="sequence"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.indexerSequence" /></property>
			
			<property name="transactionListeners">
				<list>
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalStorageUpdateTransactionListener" />
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.searchBuilderQueueManager" />
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalManagerUpdateTransaction" />
				</list>
			</property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.indexer.impl.TransactionalIndexWorker" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.transactionalIndexWorker"
	   	init-method="init" 
    	destroy-method="destroy" >
    		<property name="searchIndexBuilder"><ref bean="org.sakaiproject.search.api.SearchIndexBuilder" /></property>
			<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService" /></property>
			<property name="transactionIndexManager"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.transactionIndexManager" /></property>
			<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
			<property name="searchService" ref="org.sakaiproject.search.api.SearchService"/>
    </bean>
    
    
    
    
    <!-- 
    Merge from local to shared 
    -->
    
    
	<bean 
    	class="org.sakaiproject.search.optimize.impl.OptimizeIndexOperation" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizeIndexOperation"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journaledObject" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage" /></property>
			<property name="optimizeUpdateManager" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeIndexManager" /></property>
    </bean>
    <bean 
    	class="org.sakaiproject.search.optimize.impl.OptimizeIndexManager" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizeIndexManager"
	   	init-method="init" 
    	destroy-method="destroy" >
    		<property name="analyzerFactory" ><ref bean="org.sakaiproject.search.index.AnalyzerFactory" /></property>    
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
			<property name="transactionListeners" >
				<list>
				<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeTransactionListener" />
				</list>
			</property>
			<property name="sequence" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeSequence" /></property>
    </bean>
    
    <bean 
    	class="org.sakaiproject.search.transaction.impl.TransactionSequenceImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizeSequence"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="name"><value>optimizeSequence</value></property>
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
    </bean>
    
	<bean 
    	class="org.sakaiproject.search.transaction.impl.TransactionSequenceImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.mergeSequence" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
			<property name="name" ><value>mergeSequence</value></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.MergeUpdateManager" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.mergeUpdateManager" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="transactionListeners">
				<list>
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorageUpdateTransactionListener" />
				</list>
			</property>
			<property name="sequence"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.mergeSequence" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.journal.impl.MergeUpdateOperation" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.mergeUpdateOperation"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journaledObject"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage" /></property>
			<property name="mergeUpdateManager"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.mergeUpdateManager" /></property>
			<property name="optimizeUpdateManager" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeIndexManager" /></property>
    </bean>
    <!--
    local optimizer
    -->
	<bean 
    	class="org.sakaiproject.search.optimize.impl.OptimizableIndexImpl" 
   	 	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizableIndex"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journaledIndex"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.optimize.impl.OptimizeTransactionListenerImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizeTransactionListener" 
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
			<property name="optimizableIndex"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizableIndex" /></property>
    </bean>
    
    
    
    
    <!-- 
    Shared optimizer
    -->
    
    <bean 
    	class="org.sakaiproject.search.optimize.shared.impl.JournalOptimizationOperation" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationOperation"
	   	init-method="init" 
    	destroy-method="destroy" >
			<property name="journalOptimizationManager" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationManager" /></property>
			<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService" /></property>
    </bean>
    
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.JournalOptimizationManagerImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationManager"
 	  	init-method="init" 
    	destroy-method="destroy" >
			<property name="transactionListeners" >
				<list>
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationStartTransactionListener" />
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemLoadTransactionListener" />
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeSharedTransactionListener" />
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemSaveTransactionListener" />
					<ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationEndTransactionListener" />
				</list>
			</property>

    		<property name="analyzerFactory" ><ref bean="org.sakaiproject.search.index.AnalyzerFactory" /></property>    
			<property name="journalManager" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.optimizeJournalManager" /></property>
			<property name="sequence" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedOptimizeSequence" /></property>
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
    </bean>
    
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.DbJournalOptimizationManager" 
    id="org.sakaiproject.search.api.SearchService.parallel.index.optimizeJournalManager"
   	init-method="init" 
    	destroy-method="destroy" >
			<property name="clusterService"><ref bean="org.sakaiproject.cluster.api.ClusterService"/></property>
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
			<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>			
			<property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.JournalOptimizationStartTransactionListener" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationStartTransactionListener"
   		init-method="init" 
    	destroy-method="destroy" >
    </bean>
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.JournalOptimizationEndTransactionListener" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.journalOptimizationEndTransactionListener"
   		init-method="init" 
    	destroy-method="destroy" >
    </bean>
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.SharedFilesystemLoadTransactionListener" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemLoadTransactionListener"
   		init-method="init" 
    	destroy-method="destroy" >
			<property name="sharedFilesystemJournalStorage" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemJournalStorage" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.SharedFilesystemSaveTransactionListener" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemSaveTransactionListener"
   		init-method="init" 
    	destroy-method="destroy" >
			<property name="sharedFilesystemJournalStorage" ><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.sharedFilesystemJournalStorage" /></property>
    </bean>
	<bean 
    	class="org.sakaiproject.search.optimize.shared.impl.OptimizeSharedTransactionListenerImpl" 
   	 	id="org.sakaiproject.search.api.SearchService.parallel.index.optimizeSharedTransactionListener"
    	init-method="init" 
    	destroy-method="destroy" >
    	<property name="journalSettings"><ref bean="org.sakaiproject.search.api.JournalSettings" /></property>
    </bean>

	<bean 
    	class="org.sakaiproject.search.transaction.impl.TransactionSequenceImpl" 
    	id="org.sakaiproject.search.api.SearchService.parallel.index.sharedOptimizeSequence"
    	init-method="init" 
    	destroy-method="destroy" >
			<property name="name"><value>sharedOptimizeSequence</value></property>
			<property name="datasource"><ref bean="javax.sql.DataSource"/></property>
    </bean>
    
    <bean
        class="org.sakaiproject.search.mbeans.SearchServiceManagement"
        id="org.sakaiproject.search.mbeans.SearchServiceManagement" 
        init-method="init"
        >
        <property name="searchService"><ref bean="org.sakaiproject.search.api.SearchService" /></property>
    	<property name="indexStorageProvider"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.journaledFSIndexStorage" /></property>
		<property name="indexWorker"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.transactionalIndexWorker" /></property>
		<property name="indexListenerCloser"><ref bean="org.sakaiproject.search.api.SearchService.parallel.index.closer" /></property>
    	<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager" /></property>
    </bean>
</beans>
