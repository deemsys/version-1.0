
Secure Delivery Service for SAMigoContributed by Respondus Inc.support@respondus.com==================================The Secure Delivery Service (SDS) implements a framework that allows the selection and enforcement of additional security requirements during assessment delivery. It uses a plugin mechanism to decouple the security modules from the SAMigo core and allows the deployment of third-party security extensions without requiring further modifications to the SAMigo core. The SDS loads the configured plugins at runtime, allows the selection of modules on the assessment settings and checks the selected module for permission to continue at appropriate times during delivery. The SDS is defined by the SecureDeliverServiceAPI interface and implemented by the SecureDeliveryServiceImpl class. It's instantiated by the Spring framework and injected into the samigoApiFactory bean. During initialization, the SDS reads the samigo.secureDeliveryPlugins property, which is a list of jar files (separated by colons). The SDS looks for a file named "spring-context.xml" on the root of each plugin jar and loads all defined beans into the Spring context of the samigo-app webapp. It then looks for all beans implementing the SecureDeliveryModuleIfc interface and adds them to the security module registry.If any security modules are loaded, the SDS displays a list of the modules available under the "High Security" section of the assessment settings. If a module is selected, the module is given the opportunity to add a decoration to the assessment title when the new settings are saved. Nothing is displayed if no modules are loaded to avoid modifying the UI for people not interested. The SDS keeps track of any additional settings on the assessment's metadata and doesn't require any modifications to the database schema.The SDS guarantees that any module can be removed from the configuration at any time regardless of how many assessments have been configured to use the module. In this case, the assessment will behave during delivery as if no module was selected.  In addition, the SDS acts as a facade to all module operations and guarantees that assessments behave as if the operation was never called in case of a module exception.The SDS defines three delivery phases START, FINISH and REVIEW. Which indicate that an assessment delivery is about to be started, finished or reviewed respectively.During delivery, the SDS calls the validatePhase( phase,  assessment, request) method on the selected module whenever the assessment enters a new phase. The delivery is allowed to continue if the module returns SUCCESS. If the module returns failure, the SDS sets the outcome to "secureDeliveryError" so that the secureDeliveryError.jsp view is rendered.  The decision to allow/disallow the delivery to continue is entirely up to each module implementation. It can be something as simple as checking the browser agent to a full back-office integration that checks if the student has paid for the assessment.After validation, the SDS calls the getHTMLFragment( assessment, request, phase, status, locale ) for the selected module. The returned fragment is stored into the secureDeliveryHTMLFragment attribute of the DeliveryBean and injected into the appropriate view, depending on the delivery phase:START - deliverAssessment.jsp, tableOfContents.jspFINISH - submitted.jspREVIEW - deliverAssessment.jsp, histogramScores.jspAll phases - secureDeliveryError.jspIn addition to these views, the SDS injects one HTML fragment for each loaded module on the selectIndex.jsp view by calling the getInitialHTMLFragment( request, locale) method on each module.Plugins for the SDS are easy to develop and don't require access to the SAMigo code base. Their only dependency is the samigo-api artifact and the only requirements are the presence of the "spring-context.xml" file at the root of the jar container and the definition of at least one class that implements the SecureDeliveryModuleIfc. The samigo-assessment-blocker provides a sample implementation that always blocks assessments when selected.

Plugin beans are loaded using the class loader used to load the samigo-app clasess. If additional support jars are required, they can be placed on the tomcat/shared/lib directory.

==================================

Configure SAMigo to load the Assessment Blocker module:
Add samigo.secureDeliveryPlugins property to you sakai.properties file. 
For example: samigo.secureDeliveryPlugins=/opt/tomcat/shared/lib/samigo-assessment-blocker-2.9-SNAPSHOT.jar


   

